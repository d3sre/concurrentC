1. Schritt: Client-Server Kommunikation                                     8h  -> 8h
2. Schritt: Protokoll Implementation (inkl. parse server)                   4-8h    -> 8h (inkl. refactoring)
3. Schritt: 2 Client Strategien                                             8h      -> nur eine in 30min
4. Schritt: Spielfeld/Shared Memory (1 fork)                                8h     -> 26.04.15 -> 4h (inkl. besprechung)
5. Schritt: Erweiterung mehrere Forks (inkl. test/troublesh.)               20h   -> 17.05.15
6. Schritt: Server Kommunikation zwischen Forks                             8h
7. Schritt: Ausgaben Log Anpassen/Feinschliff                               2h
8. Schritt: Makefile                                                        4h      -> 07.06.15



CMake Tutorial: http://www.vtk.org/Wiki/CMake/Tutorials/How_to_create_a_ProjectConfig.cmake_file


Annahme für Spiel:
-Clients dürfen nicht gleich heissen
-noch freies Feld liefert FREE als Name zurück

Client-Server-Socket Tutorial: http://www.cs.rpi.edu/~moorthy/Courses/os98/Pgms/socket.html



Next steps:
- create gameplay/sockethandler/child-mode (enum processType)   1.5h
- program gameplay actions 1.5h
- child loop communication 
- shared memory 2.5h bis shared memory für numberOfSockets ohne semaphores

- gameplay start soll flag setzen -> anderer prozess 2h
- bei gameplayfield erzeugung sharedmemory zuweisung durchführen und pointer übergeben
- entscheiden was/wie daten ins shared memory -> struct für variablen shared & shared memory für spielfeld (zellenfelder errechnen)
-> grossteil gemacht, char in struct macht noch probleme, 2.5h
http://stackoverflow.com/questions/6501966/check-if-char-array-contains-int-float-or-double-value-and-store-value-to-res
 
- semaphore implementieren


open point:
- ctrl+c on server does not send finish to clients (which isn't defined in the protocol)